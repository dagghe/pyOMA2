.. pyoma2 documentation master file, created by
   sphinx-quickstart on Fri Feb  9 03:03:59 2024.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

pyOMA2's documentation!
=======================

.. image:: https://github.com/dagghe/pyOMA2/assets/64746269/aa19bc05-d452-4749-a404-b702e6fe685d

|Python 3.8| |Python 3.9| |Python 3.10| |Python 3.11| |pre-commit| |Code style: black|

This is the new and updated version of **pyOMA** module, a Python module designed for conducting operational modal analysis. With this update, we've transformed **pyOMA** from a basic collection of functions into a more sophisticated module that fully leverages the capabilities of Python classes.

The module now supports analysis of both single and multi-setup data measurements, which includes handling multiple acquisitions with a mix of reference and roving sensors. We've also introduced interactive plots, allowing users to select desired modes for extraction directly from the plots generated by the algorithms. Additionally, a new feature enables users to define the geometry of the structures being tested, facilitating the visualization of mode shapes after modal results are obtained. The underlying functions of these classes have been rigorously revised, resulting in significant enhancements and optimizations.

We provide three :doc:`examples` to show the modules capabilities:


Check out the project source_.

.. note::

   Please note that this is still an alpha release, this project is under active development.



Schematic organisation of the module showing inheritance between classes
========================================================================

.. image:: /img/info.svg



.. Hidden TOCs

.. toctree::
   :caption: Quick start
   :maxdepth: 2
   :hidden:

   Home <self>
   Installation


.. toctree::
   :caption: Documentation
   :maxdepth: 2
   :hidden:

   Index <modules>


.. toctree::
   :caption: Examples
   :maxdepth: 2
   :hidden:

   examples

=============================================================


Index
=====

* :ref:`genindex`
* :ref:`modindex`


References
==========

.. [CRGF14] Rainieri, C., & Fabbrocino, G. (2014). Operational modal analysis of civil
   engineering structures. Springer, New York, 142, 143.
.. [RBCV15] Brincker, R., & Ventura, C. (2015). Introduction to operational modal analysis.
    John Wiley & Sons.
.. [BZA01] Brincker, R., Zhang, L., & Andersen, P. (2001). Modal identification of output-only
   systems using frequency domain decomposition. Smart Materials and Structures, 10(3), 441.
.. [BVA01] Brincker, R., Ventura, C. E., & Andersen, P. (2001). Damping estimation by frequency
   domain decomposition. In Proceedings of IMAC 19: A Conference on Structural Dynamics.
.. [ZWT10] Zhang, L., Wang, T., & Tamura, Y. (2010). A frequency–spatial domain decomposition
   (FSDD) method for operational modal analysis. Mechanical Systems and Signal Processing,
   24(5), 1227-1239.
.. [ZBGS20] Zaletelj, K., Bregar, T., Gorjup, D., Slavič, J. (2020) sdypy-pyEMA,
   10.5281/zenodo.4016670, https://github.com/sdypy/sdypy
.. [BPDG99] Peeters, B., & De Roeck, G. (1999). Reference-based stochastic subspace
   identification for output-only modal analysis. Mechanical Systems and
   Signal Processing, 13(6), 855-878.
.. [MiDo11] Döhler, M. (2011). Subspace-based system identification and fault detection:
   Algorithms for large systems and application to structural vibration analysis.
   Diss. Université Rennes 1.
.. [SARB21] Amador, S. D., & Brincker, R. (2021). Robust multi-dataset identification with
   frequency domain decomposition. Journal of Sound and Vibration, 508, 116207.


.. _source: https://github.com/dagghe/pyOMA2

.. |Python 3.8| image:: https://img.shields.io/badge/Python-3.8-3776AB.svg?style=flat&logo=python&logoColor=white
    :alt: Python 3.8
    :target: https://img.shields.io/badge/Python-3.8-3776AB.svg?style=flat&logo=python&logoColor=white

.. |Python 3.9| image:: https://img.shields.io/badge/Python-3.9-3776AB.svg?style=flat&logo=python&logoColor=white
    :alt: Python 3.9
    :target: https://img.shields.io/badge/Python-3.9-3776AB.svg?style=flat&logo=python&logoColor=white

.. |Python 3.10| image:: https://img.shields.io/badge/Python-3.10-3776AB.svg?style=flat&logo=python&logoColor=white
    :alt: Python 3.10
    :target: https://img.shields.io/badge/Python-3.10-3776AB.svg?style=flat&logo=python&logoColor=white

.. |Python 3.11| image:: https://img.shields.io/badge/Python-3.11-3776AB.svg?style=flat&logo=python&logoColor=white
    :alt: Python 3.11
    :target: https://img.shields.io/badge/Python-3.11-3776AB.svg?style=flat&logo=python&logoColor=white

.. |pre-commit| image:: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white
   :alt: pre-commit
   :target: https://img.shields.io/badge/pre--commit-enabled-brightgreen?logo=pre-commit&logoColor=white

.. |Code style: black| image:: https://img.shields.io/badge/code%20style-black-000000.svg
   :alt: Code style: black
   :target: https://img.shields.io/badge/code%20style-black-000000.svg
