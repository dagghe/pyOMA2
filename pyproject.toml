[project]
name = "pyOMA_2"
version = "0.6.0"
description = "Python module for conducting Operational Modal Analysis"
authors = [
    {name = "Dag Pasca", email = "dpa@treteknisk.no"},
    {name = "Angelo Aloisio", email = "angelo.aloisio1@univaq.it"},
    {name = "Marco Martino Rosso", email = "marco.rosso@polito.it"},
    {name = "Diego Federico Margoni", email = "diegofederico.margoni@studenti.polito.it"},
]
dependencies = [
    "numpy<1.25; python_version < '3.9'",
    "numpy>=1.25; python_version >= '3.9'",
    "pandas>=2.0.3",
    "scipy>=1.9.3",
    "pydantic>=2.5.1",
    "tqdm>=4.66.1",
    "matplotlib>=3.7.4",
]
requires-python = ">=3.8,<3.13"
readme = "README.md"
license = {text = "MIT"}


[project.urls]
Homepage = "https://github.com/dagghe/pyOMA2"
Documentation = "https://pyoma.readthedocs.io/en/latest/"
Repository = "https://github.com/dagghe/pyOMA2"
Changelog = "https://github.com/dagghe/pyOMA2/blob/main/CHANGELOG.md"
Contributing = "https://github.com/dagghe/pyOMA2/blob/main/CONTRIBUTING.md"


[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"


[tool.ruff]
# Exclude common directories that are typically not part of the source code or are generated by tools.
exclude = [
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    "__pypackages__",
    "_build",
    "build",
    "dist",
    "venv",
    ".venv",
]

# Set the maximum line length to 90 characters.
line-length = 90

# Define the number of spaces used for indentation, aligning with Black's style.
indent-width = 4

# The minimum Python version to target, e.g., when considering automatic code upgrades,
# like rewriting type annotations
target-version = "py38"

[tool.ruff.lint]
# Enable Pyflakes (F) and a subset of the pycodestyle (E)  codes by default.
# pycodestyle warnings (W)
# Activate Security Rules (S) to replace bandit
# Enable the isort rules (I) to replace isort
# flake8-bugbear (B)
# flake8-simplify (SIM)
select = ["F", "E4", "E7", "E9", "W", "S", "I", "B","SIM"]
ignore = [
    "S101",  # User of assert in code
    "B011",  # assert False
] # List any rules to be ignored, currently empty.

# Allow auto-fixing of all enabled rules when using the `--fix` option.
fixable = ["ALL"]
unfixable = [] # Specify rules that cannot be auto-fixed, if any.

# Define a regex pattern for allowed unused variables (typically underscore-prefixed).
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Enforce double quotes for strings, following Black's style.
quote-style = "double"

# Use spaces for indentation, in line with Black's formatting style.
indent-style = "space"

# Keep magic trailing commas, a feature of Black's formatting.
skip-magic-trailing-comma = false

# Automatically detect and use the appropriate line ending style.
line-ending = "auto"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "E402",  # import violations
    "F401",   # imported but unused
]

[tool.pdm.dev-dependencies]
docs = [
    "sphinx>=7.1.2",
    "sphinx-rtd-theme>=2.0.0",
    "ghp-import>=2.1.0",
    "nbsphinx>=0.9.3",
    "pandoc>=2.3",
]
qa = [
    "pre-commit>=3.5.0",
    "ipdb>=0.13.13",
    "pytest>=7.4.4",
    "pytest-cov>=4.1.0",
    "notebook>=7.1.2",
    "tox>=4.14.2",
]
